name: Spring Boot CI/CD

on:
  push:
    branches: [ main, dev ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        env:
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/spring-boot-app
        run: |
          docker build -t $DOCKER_REPOSITORY:${{ github.sha }} .
          docker push $DOCKER_REPOSITORY:${{ github.sha }}

      - name: Clean up unused Docker images
        run: docker image prune -a -f

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export SPRING_DATA_REDIS_HOST=${{ secrets.SPRING_DATA_REDIS_HOST }}
            export SPRING_DATA_REDIS_PORT=${{ secrets.SPRING_DATA_REDIS_PORT }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export TOSS_PAYMENTS_CLIENT_KEY=${{ secrets.TOSS_PAYMENTS_CLIENT_KEY }}
            export TOSS_PAYMENTS_SECRET_KEY=${{ secrets.TOSS_PAYMENTS_SECRET_KEY }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            export KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            export CHATGPT_SECRET_KEY=${{ secrets.CHATGPT_SECRET_KEY }}
            
            docker stop spring-app || true
            docker rm spring-app || true

            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:${{ github.sha }}

            cd /home/ubuntu
            docker-compose down

            sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:${{ github.sha }}|" docker-compose.yml

            docker-compose up -d
